{
    "collab_server" : "",
    "contents" : "#' Read FARS data from a file into R\n#'\n#' The function acessess and reads in data from the given filename. It\n#' throws an error if the file does not exist. The data is then represented as a\n#' tibble. Note that any warning and progress messages are suppressed during the\n#' read process.\n#'\n#' @param filename A string specifying the file name of the FARS data\n#'\n#' @return a tibble representation of the data\n#'\n#' @examples\n#' \\dontrun{fars_read('accident_2015.csv.bz2')}\n#'\n#' @export\n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n\n#' Create filename according to Year\n#'\n#' The function creates the file name according to the input argument. The\n#' filename should correspond to the year of the FARS data and is in the format\n#' of \"accident_YYYY_.csv.bz2\", with YYYY being the year of interest.\n#'\n#' @param year Indicating the year of interest. It should be entered as 4 digit\n#'   integer.\n#'\n#' @return a string specifying the filename\n#'\n#' @examples\n#' \\dontrun{make_filename(2013)}\n#'\n#' @export\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n\n#' Read data from multiple files into R\n#'\n#' The function reads in data from filenames created from the input\n#' argument. \\code{\\link{make_filename}} is called to create the filenames. For\n#' each of the filenames, an attempt is made to read the file, and only column\n#' /code{MONTH} and /code{year} are selected and stored as element in a list; if\n#' the operations fail, the list element corresponding to the file will have no\n#' records. Once all files are read, the list is returned.\n#'\n#' @param years A list or vector specifying the years of interest\n#'\n#' @return a list containing data read from the files. Each element corresponds\n#'   to one particular year specified by the file name.\n#'\n#' @examples\n#' \\dontrun{fars_read_years(c(2013:2015))}\n#'\n#' @export\n#' @importFrom dplyr mutate\n#' @importFrom dplyr select\n#' @seealso \\code{\\link{fars_read}} for reading files, and\n#'   \\code{\\link{make_filename}} for creating the filename\nfars_read_years <- function(years) {\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n\n\n#' Summary of the FARS data by Year and Month\n#'\n#' The function shows number of data points per month and year in a tabular\n#' format. The summarising operation is done in the following steps: \\enumerate{\n#' \\item data is specified and read from file, refer\n#' \\code{\\link{fars_read_years}}, \\item data of each year is combined, \\item\n#' data is grouped by month and year, \\item data is then counted and tabulated }\n#'\n#' @param years A list or vector specifying the years of interest\n#'\n#' @return a data frame showing number of data points per MONTH and year. Rows\n#'   correspond to MONTH while columns correspond to year\n#'\n#' @examples\n#' \\dontrun{fars_summarise_years(c(2013:2015))}\n#'\n#' @export\n#' @importFrom dplyr bind_rows\n#' @importFrom dplyr group_by\n#' @importFrom dplyr summarize\n#' @importFrom tidyr spread\n#' @seealso \\code{\\link{fars_read_year}} for reading files, and\n#'   \\code{\\link{make_filename}} for creating the filename\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n\n#' Visualising Incidents of selected state and year\n#'\n#' The function plots incidents of selected state and year from the FARS\n#' dataset. It has exception handling to ensure\\itemize{\\item the file name is\n#' valid (refer \\code{\\link{fars_read}}), \\item the state number does exist in\n#' the data set, and \\item there is indeed data for the selected state number.}\n#' Incidents that has longitude over 900 and Latitude over 90 are discarded.\n#'\n#' @param state.num an integer representing the State Number\n#'\n#' @param year Indicating the year of interest. It should be entered as 4 digit\n#'   integer.\n#'\n#' @return None.\n#'\n#' @examples\n#' \\dontrun{fars_map_state(1, 2015)}\n#'\n#' @export\n#' @importFrom dplyr filter\n#' @importFrom maps map\n#' @importFrom graphics points\n#' @seealso \\code{\\link{fars_read}} for reading file\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n",
    "created" : 1500366471980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3871007944",
    "id" : "A702CF0D",
    "lastKnownWriteTime" : 1500370293,
    "last_content_update" : 1500370293056,
    "path" : "~/FARSR/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}